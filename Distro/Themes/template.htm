<html>
<head>
<style>
	@import url(SyntaxHighlight/source-code.css);

	::selection {
		background-color: transparent;
	}
	@set v-scroll-indicator {
		.slider {
			background-color: #a6a6a6;
			border-radius: 5px;
			margin: 0;
		}
	}
	body {
		padding: 0;
		margin: 0;
		background-color: #f6f6f6;
		line-height: normal;
		overflow-x: hidden;
		overflow-y: auto;
		image-rendering: optimize-quality;
		text-selection: #333 #dedede;
		scroll-manner: scroll-manner(animation: true, step: 10%);
	}
	body.indicator {
		overflow-y: scroll-indicator;
		vertical-scrollbar: "v-scroll-indicator";
	}
	a, a:visited {
		color: #283593;
		text-decoration: none;
	}
	a.uinLink, a.uinLink:visited {
		color: #06091E;
	}
	a:hover, a:focus {
		color: #5c6bc0;
	}
	div {
		padding: 0;
		margin: 0;
	}
	div.codeDiv {
		position: relative;
		width: calc(100vw - 35px);
	}
	span.bold {
		font-weight: 500;
	}
	span.underlined {
		text-decoration: underline;
	}
	img.codeCopyAll {
		position: absolute;
		right: 5px;
		top: 3px;
		cursor: pointer;
	}
	.smileyDiv {
		white-space: nowrap;
		color: transparent;
		overflow: hidden;
		display: inline-block;
		vertical-align: middle;
		background-repeat: no-repeat;
		background-position: 0 0;
	}
	.smileyDiv.hidden {
		display: none;
	}
	.smileySpan.hidden {
		display: none;
	}
	#history {
		padding: 0;
		margin: 0;
	}
	#history #ranges {
		flow: horizontal;
		horizontal-align: center;
		border-spacing: 10px;
		white-space: nowrap;
	}
	#history #curtime {
		margin-top: 5px;
		text-align: center;
		display: none;
	}
	#chat {
		height: auto;
		white-space: normal;
		word-wrap: normal;
		transition: opacity(quint-out, 0.4s);
		opacity: 1;
	}
	#chat.hidden {
		opacity: 0;
	}
	b, strong {
		font-weight: 500;
	}
	div.hr {
		margin-top: 5px;
		height: 1px;
		background-color: #ddd;
	}
	.msgFull {
		padding: 6px 8px;
		margin: 0;
		border-bottom: solid 3px #f6f6f6;
		border-top: solid 3px #f6f6f6;
		font-family: Segoe UI;
		font-size: 14px;
		color: #333;
		box-sizing: border-box;
		opacity: 1;
		transition: opacity(quint-out, 0.4s);
	}
	.msgFull.hidden {
		opacity: 0;
	}
	.msgFull.selected {
		background-color: #e3e3e3;
	}
	.msgTitle {
		cursor: pointer;
		box-sizing: border-box;
		white-space: nowrap;
		overflow: hidden;
		flow: horizontal;
		width: max-content;
		vertical-align: middle;
	}
	.msgTitle > div {
	}
	:not(.my) > .msgTitle > div {
		color: #844103;
	}
	.msgTitle div.msgEventImg, .msgTitle div.msgCryptImg {
		width: auto;
		height: auto;
		background-position: 0 0;
		background-repeat: no-repeat;
	}
	.msgTitle .msgMulti {
		margin-left: 10px;
		font-size: 11px;
	}
	.msgTitle .msgWhat {
		margin-left: 10px;
		font-size: 15px;
        margin-bottom: 3px;
	}
	.msgTitle .msgStatusImages > div {
		display: inline-block;
		padding: 0;
		margin: 0;
	}
	.msgTitle .msgStatusImages .msgStatusImg {
		margin-left: 10px;
	}
	.msgTitle .msgStatusImages .msgStatusExtImg {
		margin-left: 5px;
	}
	.msgTitle .msgDate {
		margin-left: 10px;
		font-size: 11px;
	}
	.msgBody {
		box-sizing: border-box;
		margin-top: 0;
		width: 100%;
	}
	.msgBody .msgInnerBody {
        behavior: htmlarea;
		width: auto;
		max-width: 100%;
		display: inline-block;
		white-space: pre-wrap;
		word-wrap: break-word;
	}
	.msgBody .msgInnerBody .linkedImgWrapper {
		position: relative;
		display: inline-block;
		width: 100%;
		margin: 0;
		padding: 0;
	}
	.msgBody .msgInnerBody .linkedImgWrapper.hidden {
		font-size: 0;
		line-height: 0;
		height: 0;
		width: 0;
		overflow: hidden;
	}
	.msgBody .msgInnerBody .linkedImgWrapper.preloading {
		height: 50px;
	}
	.msgBody .msgInnerBody .linkedImgWrapper.preloading .spinner {
		width: 40px !important;
		height: 40px !important;
		left: 10px !important;
		top: 10px !important;
	}
	.msgBody .msgInnerBody .linkedImg {
		foreground-repeat: stretch keep-ratio;
		max-width: calc(100vw - 35px);
		vertical-align: top;
		cursor: pointer;
		margin: 5px 0;
		opacity: 0;
		transition: opacity(cubic-in-out, 0.2s);
	}
	.msgBody .msgInnerBody .linkedImg.loaded {
		opacity: 1;
	}
	.msgBody .msgInnerBody .msgEmbeddedImages {
		width: auto;
		margin: 0;
		padding: 0;
		margin-top: 5px;
	}
	.msgBody .msgInnerBody .embeddedImg {
		foreground-repeat: stretch keep-ratio;
		max-width: calc(100vw - 35px);
		vertical-align: top;
		cursor: pointer;
		opacity: 0;
		transition: opacity(cubic-in-out, 0.2s);
	}
	.msgBody .msgEmbeddedImages .embeddedImg.loaded {
		opacity: 1;
	}

	.spinner {
		width: 40px;
		height: 40px;
		position: absolute;
		left: 10px;
		top: 10px;
		opacity: 1;
	}
	.spinner::after {
		content: "";
		width: 40px;
		height: 40px;
		display: block;
		background-color: transparent;
		background-position: center center;
		background-repeat: no-repeat;
		background-image: url(themepic:spinner);
		opacity: 0.40;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		position: absolute;
		z-index: -1;
	}
</style>
<script type="text/tiscript">
//	if (view.connectToInspector)
//	view.connectToInspector();

	var topTime = 0,
		selStart = 0,
		rightClickedTime = "0",
		titles = new Array(),
		scrollPos,
		topEventTime,
		autoCopy = false,
		fontCodes = false,
		showSmiles = true,
		imgLinksIn = true,
		imgLinksOut = true,
		wheelVelocity = 1,
		maxImgWidth = 0,
		maxImgHeight = 0,
		embeddedCnt = 0;

	class SelectionInfo {
		var textStr = "";
		var startTime = 0;
		var endTime = 0;
		var wholeEvents = false;
		property value(info) {
			set {
				this.textStr = (info[0] === undefined) ? "" : info[0];
				this.startTime = (info[1] === undefined) ? 0 : info[1];
				this.endTime = (info[2] === undefined) ? 0 : info[2];
				this.wholeEvents = (info[3] === undefined) ? false : info[3];
			}
		};
		function text() {
			return this.textStr;
		};
		function start () {
			return this.startTime;
		};
		function end () {
			return this.endTime;
		};
		function isWholeEvents () {
			return this.wholeEvents;
		};
	}
	var selInfo = new SelectionInfo();

	class Emoticons {
		var EMOTICON_RE,
			emoticons = {},
			lookup = [],
			emoCallback = function(img, w, h, text) {
				var textSmile = text.htmlEscape();
				return "<smile data-style=\"background-image: url(" + img + "); width: " + w + "px; height: " + h + "px;\" data-text=\"" + textSmile + "\"></smile>";
			};

		function emotify(txt, callback = emoCallback) {
			return txt.replace(EMOTICON_RE, function(a, b, text) {
				var i = 0,
				smiley = text,
				e = emoticons[text];

				if (!e) {
					while (i < lookup.length && !lookup[i].regexp.test(text)) { i++ };
					smiley = lookup[i].name;
					e = emoticons[smiley];
				}

				return e ? (b + callback(e[0], e[1], e[2], text)) : a;
			});
		};

		function init(base_url, replace_all, smilies) {
			var e, arr = [], alts, i, regexp_str;

			if (smilies) {
				if (replace_all) {
					emoticons = {};
					lookup = [];
				}

				for (e in smilies) {
					emoticons[e] = smilies[e];
					emoticons[e][0] = base_url + emoticons[e][0];
				}

				for (e in emoticons) {
					if (emoticons[e].length > 3) {
						alts = emoticons[e].slice(3).concat(e);
						i = alts.length;
						while (i--) alts[i] = alts[i].replace(/(\W)/g, "\\$1");
						regexp_str = alts.join("|");
						lookup.push({ name: e, regexp: new RegExp("^" + regexp_str + "$") });
					} else {
						regexp_str = e.replace(/(\W)/g, "\\$1");
					}
					arr.push(regexp_str);
				}

				EMOTICON_RE = new RegExp("(^|\\s)(" + arr.join("|") + ")(?=(?:$|\\s))", "g");
			}
			return emoticons;
		};
	}
	var emo = new Emoticons();

	const codeAllBase64 = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAABu0lEQVR4nK3TT2sTURSH4bOJSD6DK+nCKogKBve6FL+JRes/UNBEa7uoIJjYpmmwtQou29JJpE1sii6s2m5diCujU3QymUwmk5kwybwuNNOMqRBof3CW9+Gec+4VQAARkWMiEhugTorIoeBcDxBjgJTLZTUSiZzqInsC7XabVquF4zg0Gg1M06RarQKgaRqqqlai0egZETm8J+D7foA0m00sy8I0TQBs2+5FTv+3Bd/38TwP13UD5N+ISCwATpw7f3H85QajqRwAV58ojD0voRkWruti2zb1ep1arYau62HgRvr1kZtTOTWT3+bB/DoA9+feML3ykfGFP4jjOAFiGMYucCWlHL09u/ZjJrfF5Ku3mA0HAMNqMrFQYmr5A2Nz6+xoZmioATCazMczuW3uPivy9Xsl1OOXbxp30qskFzdR3n0ObSYArqXyQ7fSqztpZYuJFxtUTBuASs3m4XyJp0ubJGYL/NTroc2EZjDyWBm6nlT06ZVPxLNFAO5lCqQW35PIFvlVtfo207eF42cvXEpkC4w8Wgbg8uQS8Zk19L836qbT6eB5Xj8w6FPuIvsCujlwYHjA79xbw78BD6vm7xFm7DkAAAAASUVORK5CYII=";
	var codeAllBytes = Bytes.fromString(codeAllBase64);
	var codeAllImg = Image.fromBytes(codeAllBytes);
	if (codeAllImg) self.bindImage("source-code:selectall", codeAllImg);

	function updateSmiles() {
		var smileySpans = $$(.smileySpan);
		for (var smileySpan in smileySpans) smileySpan.remove();
		var smileyDivs = $$(.smileyDiv);
		for (var smileyDiv in smileyDivs) smileyDiv.remove();

		var smiles = $$(smile);
		if (showSmiles) {
			for (var smile in smiles) {
				var smileDiv = new Element("div");
				smileDiv.attributes.addClass("smileyDiv");
				smileDiv.attributes["style"] = smile.attributes["data-style"];
				smile.insertNodeAfter(smileDiv);
				smileDiv.html = smile.attributes["data-text"].htmlUnescape();
			}
		} else {
			for (var smile in smiles) {
				var smileSpan = new Element("span");
				smileSpan.attributes.addClass("smileySpan");
				smile.insertNodeAfter(smileSpan);
				smileSpan.html = smile.attributes["data-text"].htmlUnescape();
			}
		}
	}

	function updateFontStyles() {
		var boldSpans = $$(span.bold);
		for (var boldSpan in boldSpans)
		if (fontCodes)
			boldSpan.style#font-weight = "500";
		else
			boldSpan.style#font-weight = "normal";

		var ulSpans = $$(span.underlined);
		for (var ulSpan in ulSpans)
		if (fontCodes)
			ulSpan.style#text-decoration = "underline";
		else
			ulSpan.style#text-decoration = "none";
	}

	function makeImg(cls, pic) {
		return "<div class=\"" + cls + "\" style=\"background-image: url(themepic:" + pic[0] + "); " +
		"background-position: " + pic[1] + "px " + pic[2] + "px; width: " + pic[3] + "px; height: " + pic[4] + "px;\"></div>";
	}

	function appendImage(match, imgLink, cached) {
		var dataLink = "data-link=\"" + imgLink[0].htmlEscape() + "\" ";
		var action = "check";
		var display = " hidden";

		if (cached) {
			action = "download";
			display = "";
		}

		var imgWidth = imgLink[1].toFloat();
		var imgHeight = imgLink[2].toFloat();
		var ratio = imgHeight / imgWidth;

		if (maxImgWidth > 0) {
			if (imgWidth > maxImgWidth) {
				imgWidth = maxImgWidth;
				imgHeight = maxImgWidth * ratio;
			}
		} else {
			var viewportWidth = view.box(#width);
			if (imgWidth > viewportWidth) {
				imgWidth = viewportWidth;
				imgHeight = viewportWidth * ratio;
			}
		}

		if (maxImgHeight > 0 && imgHeight > maxImgHeight) {
			imgWidth = maxImgHeight / ratio;
			imgHeight = maxImgHeight;
		}

		imgWidth = imgWidth.toInteger();
		imgHeight = imgHeight.toInteger();

		var loaderWidth = Integer.min(imgWidth, imgHeight);
		var loaderHeight = loaderWidth;
		var loaderLeft = imgWidth/2 - loaderWidth/2;
		var loaderTop = imgHeight/2 - loaderHeight/2;

		match = match + "<div class=\"linkedImgWrapper" + display + "\">" +
		"<div class=\"spinner\" style=\"width: " + loaderWidth + "px; height: " + loaderHeight + "px; left: " +
		loaderLeft + "px; top: " + loaderTop + "px;\"></div>" +
		"<img data-action=\"" + action + "\" " + dataLink +
		"style=\"width: " + imgWidth + "px; height: " + imgHeight + "px;\" " +
		"src=\"themepic:dummy\" class=\"linkedImg\" alt=\"\" /></div>";
		return match;
	}

	// Modified autolinker.js regexes
	var emailRegex = /(?:[\-;:&=\+\$,\w\.]+@)/,
		protocolRegex = /(?:[a-z][-.+a-z0-9]*:(?![a-z][-.+a-z0-9]*:\/\/)(?!\d+\/?)(?:\/\/)?)/,
		wwwRegex = /(?:www\.)/,
		domainNameRegex = /[а-яёa-z0-9\.\-]*[а-яёa-z0-9\-]/,
		tldRegex = /\.(?:[а-яёa-z]{2,63})/,
		urlSuffixRegex = /[\-а-яёa-z0-9+&@#\/%=~_()|'$*\[\]?!:,.;]*[\-а-яёa-z0-9+&@#\/%=~_()|'$*\[\]]/,
		uinRegex = /(^|\s)(\d{5,9})($|\s)/,
		srcCodeRegex = /\[code=?(.*?)\]([^\uFFFF]+?)\[\/code\]/,
		boldRegex = /(^|\s)\*([^\uFFFF]+?)\*($|\s)/,
		underlineRegex = /(^|\s)_([^\uFFFF]+?)_($|\s)/,
		re_urlmailuincode = new RegExp(([
			"(", emailRegex.source, domainNameRegex.source, tldRegex.source, ")",
			"|",
			"(", "(?:", "(?:", protocolRegex.source, domainNameRegex.source, tldRegex.source, ")",
						"|",
						"(?:", "(?:.?//)?", wwwRegex.source, domainNameRegex.source, tldRegex.source, ")",
				")",
				"(?:" + urlSuffixRegex.source + ")?",
			")",
			"|",
			"(?:", uinRegex.source, ")",
			"|",
			"(?:", srcCodeRegex.source, ")",
			"|",
			"(?:", boldRegex.source, ")",
			"|",
			"(?:", underlineRegex.source, ")"
		]).join(""), "gi");

	function createBody(isMyEvent, message, links) {
		var msgOut = message.replace(/<|>/g, function(matched){ return matched.htmlEscape() });
		msgOut = msgOut.replace(re_urlmailuincode, function(match, mail, url,
								uinBefore, uin, uinAfter, srcLang, srcCode,
								boldBefore, bold, boldAfter,
								underlinedBefore, underlined, underlinedAfter) {
			if (mail) {
				return "<a href=\"mailto:" + mail + "\">" + mail + "</a>";
			} else if (url) {
				var cached = false;
				var tagAsHtml = "<a href=\"link:" + url + "\">" + url + "</a>";

				if (!isMyEvent && imgLinksIn || isMyEvent && imgLinksOut) {
					if (links !== false)
					for (var i = 0; i < links.length; i++)
					if (links[i][0] == url) {
						cached = true;
						//stdout.println("appending img for url: " + links[i][0]);
						tagAsHtml = appendImage(tagAsHtml, links[i], true);
						break;
					}
					if (!cached)
					tagAsHtml = appendImage(tagAsHtml, [ url, 50, 50 ], false);
				}

				return tagAsHtml;
			} else if (uin) {
				return uinBefore + "<a href=\"uin:" + uin + "\" class=\"uinLink\">" + uin + "</a>" + uinAfter;
			} else if (srcLang && srcCode) {
				if ($(body).style#-syntax-highlight == "on")
					return "<div class=\"codeDiv\"><img src=\"source-code:selectall\" class=\"codeCopyAll\" /><source-code lang=\"" + srcLang + "\">" + srcCode + "</source-code></div>";
				else
					return match;
			} else if (bold) {
				return boldBefore + "<span class=\"bold\">" + bold + "</span>" + boldAfter;
			} else if (underlined) {
				return underlinedBefore + "<span class=\"underlined\">" + underlined + "</span>" + underlinedAfter;
			} else return match;
		});
		msgOut = emo.emotify(msgOut);

		return msgOut;
	}

    function addEvents(events, prepend, hidehist) {
		var start = Date.ticks();
		if (prepend) {
			chatRememberTopEvent();
			for (var i = events.length - 1; i >= 0; i--) {
				var event = events[i];
				addEvent(event, prepend);
			}
		} else {
			for (var event in events)
			addEvent(event, prepend);
		}
		initTopTime();
		updateCurTime();
		updateTitles();
		updateSmiles();
		updateFontStyles();
		rescaleImages();
		view.update();
		if (hidehist) $(#history).style#display = "none";
		if (prepend) chatRestoreTopEvent();
		//stdout.println(Date.ticks() - start);
	}

	function addEvent(event, prepend = false) {
		var isMyEvent	= event[0],
			header		= event[1],
			message		= event[2],
			images		= event[3],
			links		= event[4],
			evTime		= event[5],
			evPic		= event[6],
			cryptPic	= event[7],
			statusPic	= event[8],
			statusPicEx = event[9],
			animate		= event[10],
			last		= event[11];
		var chat = $(#chat);

		// Create event items
		var msg = new Element("div");
		if (isMyEvent)
			msg.attributes["class"] = "msgFull my";
		else
			msg.attributes["class"] = "msgFull";
		if (animate)
		msg.attributes.addClass("hidden");

		msg.attributes["time"] = evTime;
		msg.on("mousedown", function (e) {
			if (e.propButton)
			rightClickedTime = this.attributes["time"];
		});

		var title = new Element("div");
		title.attributes["class"] = "msgTitle";

		msg.append(title);

		var body = new Element("div");
		body.attributes["class"] = "msgBody";

		var msgInnerBody = new Element("div");
		msgInnerBody.attributes["class"] = "msgInnerBody";

		// Add elements to DOM
		body.append(msgInnerBody);
		msg.append(body);
		if (prepend)
			chat.prepend(msg);
		else
			chat.append(msg);

		// Bind event listeners
		title.on("mousedown", function (e) {
			if (e.mainButton) {
				if ((!e.shiftKey && !e.ctrlKey) || selStart == 0) {
					clearSelection();
					updateTitles();
					selStart = this.parent.attributes["time"].toFloat(0);
					selectEvent(this.parent);
				} else {
					var selEnd = this.parent.attributes["time"].toFloat(0);
					if (e.ctrlKey) {
						if (isEventSelected(this.parent))
							deselectEvent(this.parent);
						else
							selectEvent(this.parent);
					} else if (e.shiftKey)
					for (var title in titles) {
						var el = title[1].parent;
						var msgTime = el.attributes["time"].toFloat(0);
						if ((selStart <= selEnd && msgTime >= selStart && msgTime <= selEnd) ||
							(selStart > selEnd && msgTime <= selStart && msgTime >= selEnd))
							selectEvent(el);
						else
							deselectEvent(el);
					}
				}
				saveSelection();
				e.stopPropagation();
				return true;
			}
		});

		msgInnerBody.on("mousedown", function(e) {
    		if (e.mainButton) clearSelection(e.ctrlKey || e.shiftKey);
		});

		msgInnerBody.on("mouseup", function(e) {
			if (e.mainButton) {
				saveSelection();
				if (this.selection.text == "") $(body).state.focus = true;
			}
		});

		var titleStr = makeImg("msgEventImg", evPic);
		if (cryptPic !== false)
		titleStr += makeImg("msgCryptImg", cryptPic);
		titleStr +=
		"<div class=\"msgWhat\">" + header[0] + "</div>" +
		"<div class=\"msgStatusImages\">";

		if (statusPic !== false)
		titleStr += makeImg("msgStatusImg", statusPic);
		if (statusPicEx !== false)
		titleStr += makeImg("msgStatusExtImg", statusPicEx);

		titleStr += "</div>" +
		"<div class=\"msgDate\">" + header[1] + "</div>";
		if (header[2] != "")
		titleStr += "<div class=\"msgMulti\">" + header[2] + "</div>";

		// Set texts
		title.html = titleStr;
		msgInnerBody.html = createBody(isMyEvent, message, links);

		var codeBlocks = msgInnerBody.$$(source-code);
		for (var codeBlock in codeBlocks) {
			codeBlock.parent.$(img.codeCopyAll).on("mousedown", function(e) {
				if (e.mainButton) {
					clearSelection(e.ctrlKey || e.shiftKey);
					var code = this.parent.$(source-code);
					code.selection.select(
						[bookmark: code.first, 0, false],
						[bookmark: code.last, 0, false]
					);
					e.preventDefault();
				}
			});

			codeBlock.parent.$(img.codeCopyAll).on("dblclick", function(e) {
				e.preventDefault();
				return true;
			});

			codeBlock.on("mousedown", function(e) {
    			if (e.mainButton) clearSelection(e.ctrlKey || e.shiftKey);
			});

			codeBlock.on("mouseup", function(e) {
				if (e.mainButton) saveSelection();
			});
		}

		if (images !== false) {
			var msgEmbeddedImages = new Element("div");
			msgEmbeddedImages.attributes["class"] = "msgEmbeddedImages";
			msgInnerBody.append(msgEmbeddedImages);
			for (var image in images) {
				var img = new Element("img");
				img.attributes["class"] = "embeddedImg";
				img.attributes["data-action"] = "download";
				img.attributes["data-link"] = "embedded:" + image;
				img.attributes["src"] = "themepic:dummy";
				img.attributes["alt"] = "";
				msgEmbeddedImages.append(img);
			}
		}

		if (last)
		chat.attributes.removeClass("hidden");

		if (animate)
		msg.attributes.removeClass("hidden");
	}

	function clearEvents() {
		var chat = $(#chat);
		chat.clear();
		chat.attributes.addClass("hidden");
		updateTitles();
	}

	function updateTitles() {
		titles = new Array();
		var titleNodes = $$(.msgTitle);
		for (var titleNode in titleNodes)
		titles.push([titleNode.parent.box(#top, #inner, #content), titleNode]);
	}

	function chatScrollToTop() {
		var chat = $(#chat);
		if (chat.length > 0 && chat.first) chat.first.scrollToView(true, true);
	}

	function chatScrollToBottom(animate) {
		var chat = $(#chat);
		if (chat.length > 0 && chat.last) {
			chat.last.scrollToView(true, animate);
			if (!animate) scrollSinglePixel();
		}
	}

	function chatRememberScrollPos() {
		scrollPos = $(body).scroll(#top);
	}

	function chatRestoreScrollPos() {
		$(body).scrollTo(0, scrollPos, false);
	}

	function chatRememberTopEvent() {
		var topEvent = $(#chat).first;
		if (topEvent) topEventTime = topEvent.attributes["time"];
	}

	function chatRestoreTopEvent() {
	    var msg;
		if (topEventTime)
			msg = self.select(".msgFull[time=\"" + topEventTime + "\"]");
		else
			msg = $(#chat).last;
		if (msg) {
			msg.scrollToView(true, false);
			scrollSinglePixel();
		}
	}

	function moveToTime(time) {
		var events = $$(.msgFull);
                var t = time.toFloat(0);
		for (var ev in events)
		if (ev.attributes["time"].toFloat(0) == t) {
			ev.scrollToView(false, true);
			break;
		}
	}

	function scrollEvent(cnt) {
		var msgs = $$(.msgFull);
		for (var msg in msgs)
		if (isInView(msg)) {
			if (cnt > 0) {
				for (var i = 1; i <= cnt; i++)
				if (msg.next) msg = msg.next;
			} else if (cnt < 0) {
				for (var i = cnt; i <= -1; i++)
				if (msg.prior) msg = msg.prior;
			}
			if (msg) msg.scrollToView(true, true);
			break;
		}
	}

	function scrollLine(cnt) {
		// 1 step = 10% of chat height
		$(body).scrollTo(0, $(body).scroll(#top) + cnt * view.box(#height) / 10, true);
	}

	function scrollWheel(direction) {
		// 1 step = 10% of chat height
		$(body).scrollTo(0, $(body).scroll(#top) + direction * wheelVelocity * view.box(#height) / 10, true);
	}

	// temp (and incomplete) fix for 1px scroll bug
	function scrollSinglePixel() {
		$(body).scrollTo(0, $(body).scroll(#top) + 1, false);
	}

	function updateMsgStatus(evPic) {
		if (evPic[2] < 0) evPic[2]--;
		if (evPic[3] < 0) evPic[3]--;
		var oldImg = self.select(".msgFull[time=\"" + evPic[0] + "\"] .msgEventImg");
		var newImg = new Element("div");
		newImg.attributes["class"] = "msgEventImg";
		newImg.attributes["style"] = "background-image: url(themepic:" + evPic[1] + "); " +
		"background-position: " + evPic[2] + "px " + evPic[3] + "px; width: " + evPic[4] + "px; height: " + evPic[5] + "px;";
		if (oldImg) {
			oldImg.parent.insert(newImg, oldImg.nodeIndex);
			oldImg.remove();
		}
	}

	function getTextNodes(node) {
		var result = "";
		for (var child = node.firstNode; child != null; child = child.nextNode) {
			if (child.isText || child.length == 0) {
    			result += child.text;
			} else {
				if (child.tag == "text")
					result += getTextNodes(child) + "\r\n";
				else
					result += getTextNodes(child);
			}
		}
		return result;
	}

	function getSelectedTextInfo() {
		var str = "";
		var startHistNode = 0;
		var endHistNode = 0;
		var wholeEvents = false;
		if (selStart > 0) {
			wholeEvents = true;
			var nodes = $$(.msgFull.selected);
			if (nodes.length > 0) {
				startHistNode = nodes[0].attributes["time"];
				endHistNode = nodes[nodes.length - 1].attributes["time"];
			}
			for (var node in nodes) {
				if (str.length > 0) str += "\r\n";
				var dateText = node.$(.msgDate).text;
				var whatText = node.$(.msgWhat).text;
				var multiText = "";
				var multi = node.$(.msgMulti);
				if (multi != null) {
					multiText = multi.text;
					if (multiText.length > 0) multiText = " (" + multiText + ")";
				}

				var bodyText = getTextNodes(node.$(.msgInnerBody));
				str += " " + dateText + ", " + whatText + multiText + "\r\n" + bodyText;
			}
		} else {
			var innerBodies = $$(.msgInnerBody);
			for (var innerBody in innerBodies) {
				if (innerBody.selection.text != null && innerBody.selection.text !== "") {
					if (str !== "") str += "\r\n";
					str += innerBody.selection.text;
				}
				var codeBlocks = innerBody.$$(source-code);
				for (var codeBlock in codeBlocks)
				if (codeBlock.selection.text != null && codeBlock.selection.text !== "") {
					if (str !== "") str += "\r\n";
					str += codeBlock.selection.text;
				}
			}
		}
		return [str.replace(/\r?\n/g, "\r\n"), startHistNode.toFloat(0), endHistNode.toFloat(0), wholeEvents];
	}

	function getQuote() {
		SendQuote(selInfo.text());
	}

	function saveSelection() {
		selInfo.value = getSelectedTextInfo();
		UpdateSelection(selInfo.text(), selInfo.start(), selInfo.end(), selInfo.isWholeEvents());
		if (autoCopy) copySelected();
	}

	function clearSelection(wholeOnly = false) {
		if (!wholeOnly) {
			var innerBodies = $$(.msgInnerBody);
			for (var innerBody in innerBodies)
			innerBody.selection.collapse(#toStart);

			var codeBlocks = $$(source-code);
			for (var codeBlock in codeBlocks)
			codeBlock.selection.collapse(#toStart);
		}

		selStart = 0;
		for (var title in titles)
		deselectEvent(title[1].parent);

		view.update();
	}

	function setSelection(start, end) {
		clearSelection();

		for (var title in titles) {
			var el = title[1].parent;
			var msgTime = el.attributes["time"].toFloat(0);
			if (msgTime >= start.toFloat(0) && msgTime <= end.toFloat(0))
				selectEvent(el);
			else
				deselectEvent(el);
		}
		selStart = start.toFloat(0);

		saveSelection();
	}

	function copySelected() {
		var str = selInfo.text();
		if (str !== "")
		view.clipboard(#put, str);
	}

	self.on("mousedown", function(e) {
		if (e.mainButton) {
			clearSelection();
			saveSelection();
		}
	});

	function isInRange(offset, start, end) {
		//stdout.println(offset + " between " + start + " and " + end);
		return (offset >= start && offset <= end) || (offset >= end && offset <= start);
	}

	$(body).subscribe(function(e) {
		if (e.altKey) {
			if (e.wheelDelta > 0)
				scrollEvent(-1);
			else
				scrollEvent(+1);
		} else if (e.wheelDelta)
			scrollWheel(-e.wheelDelta);
		e.preventDefault();
		return true;
	}, Event.MOUSE, Event.MOUSE_WHEEL);

	$(body).subscribe(function(e) {
		if (e.altKey && e.keyCode in [Event.VK_UP, Event.VK_DOWN, Event.VK_PRIOR, Event.VK_NEXT])
		switch(e.keyCode) {
			case Event.VK_UP:
				scrollEvent(-1);
				e.preventDefault();
				return true;
			case Event.VK_DOWN:
				scrollEvent(+1);
				e.preventDefault();
				return true;
			case Event.VK_PRIOR:
				scrollEvent(-5);
				e.preventDefault();
				return true;
			case Event.VK_NEXT:
				scrollEvent(+5);
				e.preventDefault();
				return true;
		}
	}, Event.KEY, Event.KEY_DOWN);

	self.subscribe(function(e) {
		if (e.type == Event.MOUSE_DOWN && e.propButton) {
			var isLink = false;
			var isImage = false;
			var data = "";
			if (e.target.tag == "a") {
				isLink = true;
				data = e.target.attributes["href"];
			} else if (e.target.tag == "img") {
				isImage = true;
				data = e.target.attributes["src"];
			}
			OpenChatMenu(data, rightClickedTime, isLink, isImage);
		}
	}, Event.MOUSE);

	function isEventSelected(el) {
		return el.attributes.hasClass("selected");
	}

	function selectEvent(el) {
		if (!el.attributes.hasClass("selected"))
		el.attributes.addClass("selected");
	}

	function deselectEvent(el) {
		if (el.attributes.hasClass("selected"))
		el.attributes.removeClass("selected");
	}

	function bindImgPreview(imgTag) {
		imgTag.on("mousedown", function(e) {
			if (!e.mainButton) return;

			var msg = this.$p(.msgFull);
			//var time = msg.attributes["time"].toFloat(0);
			var cnt = 0, selImg = 0;
			var imgLinks = new Array();

			var linkedImgs = msg.$$(img[src^="download:"]);
			for (var linkedImg in linkedImgs) {
				imgLinks.push(linkedImg.attributes["src"].substr(9));
				if (linkedImg === this) selImg = cnt;
				cnt++;
			}

			var embeddedImgs = msg.$$(img[src^="embedded:"]);
			for (var embeddedImg in embeddedImgs) {
				imgLinks.push(embeddedImg.attributes["src"]);
				if (embeddedImg === this) selImg = cnt;
				cnt++;
			}
			ShowPreview(imgLinks, selImg);
		});
	}

	function showImage(imgTag, link) {
		if (link.indexOf("embedded:") == 0) {
			imgTag.attributes["src"] = link;
		} else {
			imgTag.attributes["src"] = "download:" + link;
			imgTag.parent.attributes.removeClass("preloading");
			imgTag.parent.$(.spinner).style#display = "none";
		}
		imgTag.attributes.addClass("loaded");
		imgTag.style#width = "auto";
		imgTag.style#height = "auto";
		bindImgPreview(imgTag);
	}

	function imgCheck(data, status) {
		//stdout.println("checking...");
		var responseStr = data.toString("UTF-8");
		if (responseStr == "") {
	        this.parent.remove();
			return;
		}

		var response = parseData(responseStr);
		if (response.isImg === 1) { // Image link confirmed, show preloader and start download
			this.parent.attributes.removeClass("hidden");
			this.parent.attributes.addClass("preloading");
			showImage(this, response.link);
		} else { // Not an image link, remove loader
			this.parent.remove();
		}
	}

	function getImg(imgTag) {
		var action = imgTag.attributes["data-action"];
		var link = imgTag.attributes["data-link"];
		imgTag.attributes.remove("data-action");
		imgTag.attributes.remove("data-link");
		if (action == "check") // not in cache, check first
			imgTag.request(imgCheck, #get, "check:" + link);
		else // image was already cached or embedded
			showImage(imgTag, link);
	}

    function isInView(el) {
		var elTop = el.box(#top, #inner, #root);
		var elBottom = el.box(#bottom, #inner, #root);
		var viewHeight = view.box(#height);
		//stdout.println(elTop + " - " + elBottom + ", " + viewHeight);
		if (elTop <= 0 && elBottom >= 0 ||
			elTop > 0 && elBottom < viewHeight ||
			elTop <= viewHeight && elBottom >= viewHeight)
			return true;
		else
			return false;
	}

	self.timer(250, function() {
		var imgs = $$(img[data-action]);
		for (var img in imgs)
		if (isInView(img)) getImg(img);
		return true;
	}, true);

	function deleteEvents(start, end) {
		var startTime = start.toFloat(0);
		var endTime = end.toFloat(0);
		var msgs = $$(.msgFull);
		for (var msg in msgs) {
			var when = msg.attributes["time"].toFloat(0);
			if (when >= startTime && when <= endTime) msg.remove();
		}
	}

	function initSettings(autoCopyHist, showSmilesAsImg, wheelVelocityVal, ChatImageQuality,
						  MaxChatImgWidthVal, MaxChatImgHeightVal, EnableImgLinksIn, EnableImgLinksOut,
						  FontStyleCodes) {
		autoCopy = autoCopyHist;
		showSmiles = showSmilesAsImg;
		wheelVelocity = wheelVelocityVal;

		imgLinksIn = EnableImgLinksIn;
		imgLinksOut = EnableImgLinksOut;

		switch(ChatImageQuality) {
			case 0:
				$(body).style#image-rendering = "optimize-quality";
				break;
			case 1:
				$(body).style#image-rendering = "optimize-speed";
				break;
			case 2:
				$(body).style#image-rendering = "crisp-edges";
				break;
		}
		maxImgWidth = MaxChatImgWidthVal;
		maxImgHeight = MaxChatImgHeightVal;

		fontCodes = FontStyleCodes;

		updateFontStyles();
		rescaleImages();
		view.update();
	}

	function rescaleImages() {
		var linkedImgs = $$(.msgBody .msgInnerBody .linkedImg);
		for (var linkedImg in linkedImgs) {
			if (maxImgWidth > 0)
				linkedImg.style#max-width = maxImgWidth + "px";
			else
				linkedImg.style#max-width = "calc(100vw - 35px)";

			if (maxImgHeight > 0)
				linkedImg.style#max-height = maxImgHeight + "px";
			else
				linkedImg.style#max-height = "none";
		}

		var embeddedImgs = $$(.msgBody .msgEmbeddedImages .embeddedImg);
		for (var embeddedImg in embeddedImgs) {
			if (maxImgWidth > 0)
				embeddedImg.style#max-width = maxImgWidth + "px";
			else
				embeddedImg.style#max-width = "calc(100vw - 35px)";

			if (maxImgHeight > 0)
				embeddedImg.style#max-height = maxImgHeight + "px";
			else
				embeddedImg.style#max-height = "none";
		}
	}

	function initSmiles(smiles) {
		emo.init("smile:", true, parseData(smiles));
	}

	function num2weekday(num) {
		var month = ["Понедельник","Вторник","Среда","Четверг","Пятница","Суббота","Воскресенье"];
		return month[num];
	}

	function num2month(num) {
		var month = ["Января","Февраля","Марта","Апреля","Мая","Июня","Июля","Августа","Сентября","Октября","Ноября","Декабря"];
		return month[num - 1];
	}

	function delphi2unix(time) {
		return (time - 25569.0) * 86400000.0;
	}

	function unix2delphi(time) {
		return time / 86400000.0 + 25569.0;
	}

	function initTopTime() {
		if (topTime == 0 && $(#chat).first)
		topTime = $(#chat).first.attributes["time"].toFloat(0);
		if (topTime == 0){
			var now = new Date();
			topTime = unix2delphi(now.valueOf() + now.timeZoneOffset());
		}
	}

	function updateCurTime() {
		var date = new Date(delphi2unix(topTime));
		$(#curtime).html = num2weekday(date.UTCdayOfWeek) + ", " + date.UTCday + " " + num2month(date.UTCmonth) + " " + date.UTCyear/* + ", " + date.UTChour + ":" + date.UTCminute*/;
		$(#curtime).style#display = "block";
	}

	function LoadChatHistory(numOfDays) {
		$(#h_today).style#display = "none";
		$(#h_yesterday).style#display = "none";
		$(#h_oneday).style#display = "inline";
		$(#h_twodays).style#display = "inline";
		initTopTime();
		LoadHistory(numOfDays, topTime);
		if (numOfDays >= 0) {
			topTime = Math.floor(topTime - numOfDays);
			updateCurTime();
		}
	}

	$(#h_today).on("click", function (e) {
		LoadChatHistory(0);
	});
	$(#h_yesterday).on("click", function (e) {
		LoadChatHistory(1);
	});
	$(#h_oneday).on("click", function (e) {
		LoadChatHistory(1);
	});
	$(#h_twodays).on("click", function (e) {
		LoadChatHistory(2);
	});
	$(#h_threedays).on("click", function (e) {
		LoadChatHistory(3);
	});
	$(#h_lastweek).on("click", function (e) {
		LoadChatHistory(7);
	});
	$(#h_lastmonth).on("click", function (e) {
		LoadChatHistory(30);
	});
	$(#h_lastyear).on("click", function (e) {
		LoadChatHistory(365);
	});
	$(#h_all).on("click", function (e) {
		$(#history).style#display = "none";
		LoadChatHistory(-1);
	});
</script>
</head>
<body>
	<div id="history">
		<div id="ranges">
			<a href="" id="h_today">Сегодня</a>
			<a href="" id="h_yesterday">Вчера</a>
			<a href="" id="h_oneday" style="display: none">1 день</a>
			<a href="" id="h_twodays" style="display: none">2 дня</a>
			<a href="" id="h_threedays">3 дня</a>
			<a href="" id="h_lastweek">Неделя</a>
			<a href="" id="h_lastmonth">Месяц</a>
			<a href="" id="h_lastyear">Год</a>
			<a href="" id="h_all">Всё</a>
		</div>
		<div id="curtime"></div>
		<div class="hr"></div>
	</div>
	<div id="chat" class="hidden"></div>
</body>
</html>