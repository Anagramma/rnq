<!-- Template version: 1125.34 -->
<html>
<head>
<style>
	@import url(SyntaxHighlight/source-code.css);
	@import url(template.css);
</style>
<script type="text/tiscript">
	if (view.connectToInspector)
	view.connectToInspector();

	var topTime = 0,
		selStart = 0,
		eventCount = 0,
		eventLimit = 1000,
		rightClickedTime = "0",
		messages = new Array(),
		scrollPos,
		topEventTime,
		isLoading = false,
		autoScroll = true,
		autoCopy = false,
		fontCodes = false,
		showSmiles = true,
		imgLinksIn = true,
		imgLinksOut = true,
		videoLinks = true,
		wheelVelocity = 1,
		maxImgWidth = 0,
		maxImgHeight = 0,
		embeddedCnt = 0,
		preferredRes = 0,
		cachePath = "",

		body = $(body),
		chat = $(#chat),
		history = $(#history),
		toggle = $(#toggle),
		lastcnt = $(#lastcnt),
		loading = $(#loading),
		curtime = $(#curtime),

		emailRegex = /(?:[\-;:&=\+\$,\w\.]+@)/,
		protocolRegex = /(?:[a-z][-.+a-z0-9]*:(?![a-z][-.+a-z0-9]*:\/\/)(?!\d+\/?)(?:\/\/)?)/,
		wwwRegex = /(?:www\.)/,
		domainNameRegex = /[а-яёa-z0-9\.\-]*[а-яёa-z0-9\-]/,
		tldRegex = /\.(?:[а-яёa-z]{2,63})/,
		urlSuffixRegex = /[\-а-яёa-z0-9+&@#\/%=~_()|'$*\[\]?!:,.;]*[\-а-яёa-z0-9+&@#\/%=~_()|'$*\[\]]/,
		uinRegex = /(^|\s)(\d{5,9})($|\s)/,
		srcCodeRegex = /\[code=?(.*?)\]([^\uFFFF]+?)\[\/code\]/,
		boldRegex = /(^|\s)\*(\S[^\uFFFF]+?\S)\*($|\s)/,
		underlineRegex = /(^|\s)_(\S[^\uFFFF]+?\S)_($|\s)/,
		youtubeRegex = /(www\.)?(youtube\.com\/watch|youtu.be\/).+/,
		vimeoRegex = /(www\.)?(vimeo\.com\/).+/,
		re_urlmailuincode = new RegExp(([
			"(?:(^|\\s)(", emailRegex.source, domainNameRegex.source, tldRegex.source, ")($|\\s))",
			"|",
			"(?:(^|\\s)(", "(?:", "(?:", protocolRegex.source, domainNameRegex.source, tldRegex.source, ")",
						"|",
						"(?:", "(?:.?//)?", wwwRegex.source, domainNameRegex.source, tldRegex.source, ")",
				")",
				"(?:" + urlSuffixRegex.source + ")?",
			")($|\\s))",
			"|",
			"(?:", uinRegex.source, ")",
			"|",
			"(?:", srcCodeRegex.source, ")",
			"|",
			"(?:", boldRegex.source, ")",
			"|",
			"(?:", underlineRegex.source, ")"
		]).join(""), "gi");

	class VideoClass {
		var videoinit = false,
			video = $(#video),
			videopos = $(#videopos),
			videotime = $(#videotime),
			videotimecode = "00s",
			videovol = $(#videovol),
			videoview = $(#videoview),
			videoload = $(#videoload),
            videoinfo = $(#videoinfo),
			videoplay = $(#play),
			videopause = $(#pause),
			videoupload = $(#upload),
			videoclose = $(#close),
			videotitle,
			videocodecs,
			videoformat,
			videolink,
			videokind,
			vollevel = 0.85,
			animCnt = 0,
			animTotal = 30.0,
			animFunc = function() {
				var opacityVal = easeOutCubic(animCnt, 0.6, -0.6, animTotal);
				var scaleVal = easeOutCubic(animCnt, 1.0, 0.8, animTotal);
				this.style#opacity = opacityVal;
				this.style#transform = "scale(" + scaleVal + ") translate(-50px, -50px)";
				animCnt++;
				if (animCnt > animTotal) {
					this.style#display = "none";
					return false;
				} else {
					this.style#display = "block";
					return true;
				}
			},
			playpauseSwitch = function() {
				if (!videoinit) return;
				videoplay.style#display = "none";
				videopause.style#display = "none";
				if (video.videoIsPlaying()) {
					videoplay.timer(0, animFunc);
					animCnt = 0;
					videopause.timer(10, animFunc);
					video.videoStop();
				} else {
					videopause.timer(0, animFunc);
					animCnt = 0;
					videoplay.timer(10, animFunc);
					if (video.videoIsEnded())
						video.videoPlay(0);
					else
						video.videoPlay();
				}
			},
			closeVideo = function() {
				video.videoStop();
				video.videoUnload();
				videoview.attributes.removeClass("visible");
				gc();
			},
			saveVolLevel = function() {
				SaveVolumeLevel(vollevel);
			};

		function this() {
			videoplay.on("click", playpauseSwitch);
			videopause.on("click", playpauseSwitch);
			video.on("click", playpauseSwitch);
			videopos.on("click", function() {
				video.videoPosition(this.value);
				video.videoPlay();
			});
			videovol.on("change", function() {
				vollevel = logslider(this.value);
				video.audioVolume(vollevel);
				self.timer(1000, saveVolLevel);
			});
			videotime.on("mousedown", function(e) {
				var lnk;
				if (kind == "youtube")
					lnk = videolink + (videolink.indexOf("?") >= 0 ? "&t=" : "?t=") + videotimecode;
				else if (kind == "vimeo")
					lnk = videolink + "#t=" + videotimecode;
				if (e.mainButton) {
					closeVideo();
					view.load("link:" + lnk);
				} else {
					SendInput(lnk);
				}
			});
			video.onControlEvent = function(e) {
				if (e.type == Event.VIDEO_STARTED) {
					alignPlayerControls();
				} else if (e.type == Event.VIDEO_STOPED) {
				} else if (e.type == Event.VIDEO_INITIALIZED) {
					videoinit = true;
					var content = videotitle + "<br><br>" + GetTranslation("Resolution:") + " " + video.videoWidth() + "x" + video.videoHeight();
					if (videoformat) content += "<br>" + GetTranslation("Format:") + " " + videoformat;
					if (videocodecs) content += "<br>" + GetTranslation("Codecs:") + " " + videocodecs;

					videoinfo.html = content;
					alignPlayerControls();
				}
			}

			videoclose.on("click", closeVideo);
			videoupload.on("click", function() {
				if (cachePath == "") return;
				var (w,h) = video.box(#dimension);
				var image = new Image(video.videoWidth(), video.videoHeight(), video);
				var bytes = image.toBytes();
				bytes.save(cachePath + "snapshot.png");
				new Image(w, h, video);
				UploadLastSnapshot();
			});
		}

		function initTitles() {
			videotime.attributes["title"] = GetTranslation("Get link with current time [LMB - open in browser, RMB - insert to chat input]");
			videoupload.attributes["title"] = GetTranslation("Make snapshot and upload it to server");
			videoclose.attributes["title"] = GetTranslation("Close video preview");
		}

		function show() {
			$(#controls).attributes.removeClass("visible");
			videoview.attributes.addClass("visible");
		}

		function isVisible() {
			return videoview.attributes.hasClass("visible");
		}

		function load(link) {
			return video.videoLoad(link);
		}

		function play(pos) {
			video.videoPlay(pos);
		}

		function startPulse() {
			video.timer(500, pulse);
			pulse();
		}

        function startVideo(url, format, codecs) {
			setLoadingText(GetTranslation("Loading video stream..."));
			videoformat = format;
			videocodecs = codecs;
			if (load(url)) {
				volume = GetVolumeLevel();
				play(0);
				startPulse();
			} else {
				error();
			}
			setLoadingText("");
		}

		function setLoadingText(html, showFormats = false) {
			videoload.html = html;
			videoload.on("click", "a[close]", closeVideo);
			if (showFormats) videoload.on("click", "div[format]", function(e) {
				startVideo(e.target.attributes["url"], e.target.attributes["format"], e.target.attributes["codecs"]);
			});
		}

		property init(val) {
			set videoinit = val;
			get return videoinit;
		}

		property title(val) {
			set videotitle = val;
			get return videotitle;
		}

		property src(val) {
			set videolink = val;
			get return videolink;
		}

		property kind(val) {
			set videokind = val;
			get return videokind;
		}

		property volume(val) {
			set {
				vollevel = val;
				videovol.value = expslider(vollevel);
				video.audioVolume(vollevel);
			}
			get return vollevel;
		}

	    function error() {
			videoinit = false;
			videoview.attributes.removeClass("visible");
			view.msgbox(#information, GetTranslation("Failed to load video"), GetTranslation("Error"), #ok);
		}

		function easeOutCubic(currentIteration, startValue, changeInValue, totalIterations) {
    		return changeInValue * (Math.pow(currentIteration / totalIterations - 1.0, 3.0) + 1.0) + startValue;
		}

		function logslider(pos) {
			return Math.log10(pos) / 2;
		}

		function expslider(val) {
			return Math.pow(10, val * 2).toInteger();
		}

		function hms(seconds) {
			var h, m, s;
			s = seconds % 60; seconds /= 60;
			m = seconds % 60; seconds /= 60;
			h = seconds % 60; return (h, m, s);
		}

		function pulse() {
			var m = video.videoDuration().toInteger();
			var t = video.videoPosition().toInteger();
			if (!videopos.state.hover) {
				videopos.sliderRange(0, m);
				videopos.value = t;
			}
			var (th, tm, ts) = hms(t);
			var (mh, mm, ms) = hms(m);
			if (th == 0 && mh == 0) {
				videotime.value = String.printf("%02d:%02d / %02d:%02d", tm, ts, mm, ms);
				videotimecode = String.printf("%02dm%02ds", tm, ts);
			} else {
				videotime.value = String.printf("%d:%02d:%02d / %d:%02d:%02d", th, tm, ts, mh, mm, ms);
				videotimecode = String.printf("%dh%02dm%02ds", th, tm, ts);
			}

			return true;
		}

		function alignPlayerControls() {
			self.timer(100, function(){
				var videoWidth = video.videoBox()[2];
				var controls = $(#controls);
				controls.style#width = (videoWidth + 2) + "px";
				controls.attributes.addClass("visible");
			});
		}
	}
	var vc = new VideoClass();

	class SelectionInfo {
		var textStr = "",
			startTime = "0",
			endTime = "0",
			wholeEvents = false;

		property value(info) {
			set {
				this.textStr = (info[0] === undefined) ? "" : info[0];
				this.startTime = (info[1] === undefined) ? "0" : info[1];
				this.endTime = (info[2] === undefined) ? "0" : info[2];
				this.wholeEvents = (info[3] === undefined) ? false : info[3];
			}
		};
		function text() {
			return this.textStr;
		};
		function start() {
			return this.startTime;
		};
		function end() {
			return this.endTime;
		};
		function isWholeEvents() {
			return this.wholeEvents;
		};
	}
	var selInfo = new SelectionInfo();

	class Emoticons {
		var EMOTICON_RE,
			emoticons = {},
			lookup = [],
			emoCallback = function(img, w, h, text) {
				var textSmile = text.htmlEscape();
				return "<smile data-style=\"background-image: url(" + img + "); width: " + w + "px; height: " + h + "px;\" data-text=\"" + textSmile + "\"></smile>";
			};

		function emotify(txt, callback = emoCallback) {
			if (lookup.length == 0) return txt;
			return txt.replace(EMOTICON_RE, function(a, b, text) {
				var i = 0,
				smiley = text,
				e = emoticons[text];

				if (!e) {
					while (i < lookup.length && !lookup[i].regexp.test(text)) { i++ };
					smiley = lookup[i].name;
					e = emoticons[smiley];
				}

				return e ? (b + callback(e[0], e[1], e[2], text)) : a;
			});
		};

		function init(base_url, replace_all, smilies) {
			var e, arr = [], alts, i, regexp_str;

			if (smilies) {
				if (replace_all) {
					emoticons = {};
					lookup = [];
				}

				for (e in smilies) {
					emoticons[e] = smilies[e];
					emoticons[e][0] = base_url + emoticons[e][0];
				}

				for (e in emoticons) {
					if (emoticons[e].length > 3) {
						alts = emoticons[e].slice(3).concat(e);
						i = alts.length;
						while (i--) alts[i] = alts[i].replace(/(\W)/g, "\\$1");
						regexp_str = alts.join("|");
						lookup.push({ name: e, regexp: new RegExp("^" + regexp_str + "$") });
					} else {
						regexp_str = e.replace(/(\W)/g, "\\$1");
					}
					arr.push(regexp_str);
				}

				EMOTICON_RE = new RegExp("(^|\\s)(" + arr.join("|") + ")(?=(?:$|\\s))", "g");
			}
			return emoticons;
		};
	}
	var emo = new Emoticons();

	class FinishImage: Behavior {
		function detached() {
			finishImage(this);
		}
	}

	function prebindImage(uri, base64) {
		var img = Image.fromBytes(Bytes.fromString(base64));
		if (img) self.bindImage(uri, img);
	}

	prebindImage("source-code:selectall", "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAABu0lEQVR4nK3TT2sTURSH4bOJSD6DK+nCKogKBve6FL+JRes/UNBEa7uoIJjYpmmwtQou29JJpE1sii6s2m5diCujU3QymUwmk5kwybwuNNOMqRBof3CW9+Gec+4VQAARkWMiEhugTorIoeBcDxBjgJTLZTUSiZzqInsC7XabVquF4zg0Gg1M06RarQKgaRqqqlai0egZETm8J+D7foA0m00sy8I0TQBs2+5FTv+3Bd/38TwP13UD5N+ISCwATpw7f3H85QajqRwAV58ojD0voRkWruti2zb1ep1arYau62HgRvr1kZtTOTWT3+bB/DoA9+feML3ykfGFP4jjOAFiGMYucCWlHL09u/ZjJrfF5Ku3mA0HAMNqMrFQYmr5A2Nz6+xoZmioATCazMczuW3uPivy9Xsl1OOXbxp30qskFzdR3n0ObSYArqXyQ7fSqztpZYuJFxtUTBuASs3m4XyJp0ubJGYL/NTroc2EZjDyWBm6nlT06ZVPxLNFAO5lCqQW35PIFvlVtfo207eF42cvXEpkC4w8Wgbg8uQS8Zk19L836qbT6eB5Xj8w6FPuIvsCujlwYHjA79xbw78BD6vm7xFm7DkAAAAASUVORK5CYII=");
	prebindImage("history:toggle", "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAYRJREFUeNqkkz0sA2EYx+/qI21sGAwMUiQ+VpNIMDBc5BZD1woGJBWTzxhEYjAwWLrUIDbD4RIkEovF1khEhBIGYmAsg57fkzyXXJsTkr7JL//e+77PZ5/X9DzPKGeZYZuWZXUgMzAITfANd3AAW67rvoQ6wFC+12BOzz7hHiqgDSKQh0mc7Bi6EVwbMA8fMA61XOyCdn7XwwpUQoZgyaIM2BhAzuAVejGSlA3btj3HcYL3+pBTLaslmMGi6oRvHLY4O0dWIQqzEfVag4jnRzj6R/O3oQDDJsbHUit0wztcQYpIWdKXvUvohGuxpBy/lFukWTLIqrGhjmJwo99R1Qttaqw0FXGwoM2T9QYjRP8KGNpaWhqSGr0OicNDhMvSzYRmkuD7ORCgoMMjA7Xul8Ga0uCHZsgUViMNOHr6ZUr7kRP9G+Olk1iF7EOPTuMujvJ6Jv2ZhiWQe6OcZcJGWaZtWVOUUc7pKLcGRnkM472/HlMKhqBR081pPzaLHlO5z/lHgAEAAGOCaxpjc90AAAAASUVORK5CYII=");
	prebindImage("logo:youtube", "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAKCAYAAACE2W/HAAAACXBIWXMAAAsSAAALEgHS3X78AAAArklEQVR4nKWQzwoBcRzEf28yw5aSV+Bd9gW47gM5yoHkwiuMFHZb+XNzwRa1HKSvA6e1qHWY03w+NY0TWBE4FrgVmAhMBVom6avbChwJLDuB/RzwV7pO4K6AuHECr9kiDkMLg8Am1donMXF5xdXsmdvNlu22TeuNLHP/KsZRZItmy1T2csXL29T53Ga+b2Lp09TjX+f0CogdJ9ATOBC4EngQeM4BTwL3AtcChwJLD8pEJ99Nd3bdAAAAGnRFWHRBdXRob3IAVWxlYWQgU3lzdGVtcywgSW5jLskdPnYAAAAASUVORK5CYII=");
	prebindImage("logo:vimeo", "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAKCAYAAACE2W/HAAAACXBIWXMAAAsSAAALEgHS3X78AAAA+0lEQVR4nG3SoUoEYRiF4dHV4AaxGNbi62ISjIKCTYs3YDEYzdsMKqhFwSsQb0BMBpETDNvEsM0kuBdwUNSFFWHht3wjv8PU878PfANTpJQK5DHkGeQd5HvkI+Tp2OeRz5BfkfvIuymlogjYQj5BfkNOyF/Iy4EvkEexJ+ReDjvITwHKYDuuOIy3cn/O4QryJvJNFhzHqbPI59l++QcDN5D3kAcR3Ma+iHwX2wfy6j8Y0TpyL6JP5DbyQXzjN/I+crMOzlXOfUB+R/5BvkZeKNsqbCCfIg8zPELuIq8hj9fCwFvILxl6RN5Ansy7OjgVP0Af+Qp5CXmi2v0CqWBjfdCw5N4AAAAASUVORK5CYII=");

	function updateSmiles() {
		var smileySpans = $$(.smileySpan);
		for (var smileySpan in smileySpans) smileySpan.remove();
		var smileyDivs = $$(.smileyDiv);
		for (var smileyDiv in smileyDivs) smileyDiv.remove();

		var smiles = $$(smile);
		for (var smile in smiles)
		if (showSmiles) {
			var smileDiv = new Element("div");
			smileDiv.attributes.addClass("smileyDiv");
			smileDiv.attributes["style"] = smile.attributes["data-style"];
			smile.insertNodeAfter(smileDiv);
			smileDiv.html = smile.attributes["data-text"].htmlUnescape();
		} else {
			var smileSpan = new Element("span");
			smileSpan.attributes.addClass("smileySpan");
			smile.insertNodeAfter(smileSpan);
			smileSpan.html = smile.attributes["data-text"].htmlUnescape();
		}
	}

	function updateFontStyles() {
		self.style.documentRules({
			selector: "span.bold",
			properties: function(rule) {
				return { font-weight: fontCodes ? "500" : "normal"; }
			}
		});

		self.style.documentRules({
			selector: "span.underlined",
			properties: function(rule) {
				return { text-decoration: fontCodes ? "underline" : "none"; }
			}
		});
	}

	function makeImg(cls, pic) {
		return "<div class=\"" + cls + "\" style=\"background-image: url(themepic:" + pic[0] + "); " +
		"background-position: " + pic[1] + "px " + pic[2] + "px; width: " + pic[3] + "px; height: " + pic[4] + "px;\"></div>";
	}

	function appendImage(tagAsHtml, imgLink, cached) {
		var dataLink = "data-link=\"" + imgLink[0].htmlEscape() + "\" ";
		var action = "check";
		var display = " hidden";

		if (cached) {
			action = "download";
			display = "";
		}

		var imgWidth = imgLink[1].toFloat();
		var imgHeight = imgLink[2].toFloat();
		var ratio = imgHeight / imgWidth;

		if (maxImgWidth > 0) {
			if (imgWidth > maxImgWidth) {
				imgWidth = maxImgWidth;
				imgHeight = maxImgWidth * ratio;
			}
		} else {
			var viewportWidth = view.box(#width);
			if (imgWidth > viewportWidth) {
				imgWidth = viewportWidth;
				imgHeight = viewportWidth * ratio;
			}
		}

		if (maxImgHeight > 0 && imgHeight > maxImgHeight) {
			imgWidth = maxImgHeight / ratio;
			imgHeight = maxImgHeight;
		}

		imgWidth = imgWidth.toInteger();
		imgHeight = imgHeight.toInteger();

		tagAsHtml.print("<div class=\"linkedImgWrapper" + display + "\">" +
		"<img data-action=\"" + action + "\" " + dataLink +
		"style=\"width: " + imgWidth + "px; height: " + imgHeight + "px;\" " +
		"class=\"linkedImg\" alt=\"\" /></div>");
	}

	function createBody(isMyEvent, message, links) {
		var msgOut = message.replace(/\u0000/g, "");
		msgOut = msgOut.replace(/<|>|&/g, function(matched){ return matched.htmlEscape() });
		msgOut = emo.emotify(msgOut);
		msgOut = msgOut.replace(re_urlmailuincode, function(match,
								mailBefore, mail, mailAfter,
								urlBefore, url, urlAfter,
								uinBefore, uin, uinAfter, srcLang, srcCode,
								boldBefore, bold, boldAfter,
								underlinedBefore, underlined, underlinedAfter) {
			if (mail) {
				return mailBefore + "<a href=\"mailto:" + mail + "\">" + mail + "</a>" + mailAfter;
			} else if (url) {
				var cached = false;
				var tagAsHtml = Stream.openString();
				tagAsHtml.print(urlBefore);
				tagAsHtml.print("<a href=\"link:" + url + "\">" + url + "</a>");
				var videoHref = "<a href=\"#\" src=\"" + url + "\" title=\"" + GetTranslation("Preview video") + "\"";
				var isVideoLink = false;
				if (youtubeRegex.test(url)) {
					tagAsHtml.print(videoHref + " kind=\"youtube\"><div class=\"youtubeimg\"></div></a>");
					isVideoLink = true;
				} else if (vimeoRegex.test(url)) {
					tagAsHtml.print(videoHref + " kind=\"vimeo\"><div class=\"vimeoimg\"></div></a>");
					isVideoLink = true;
				}

				if (!isMyEvent && imgLinksIn || isMyEvent && imgLinksOut)
				if (!isVideoLink || (isVideoLink && videoLinks)) {
					if (links !== false)
					for (var link in links)
					if (link[0] == url) {
						cached = true;
						//stdout.println("appending img for url: " + links[i][0]);
						appendImage(tagAsHtml, link, true);
						break;
					}
					if (!cached)
					appendImage(tagAsHtml, [ url, 50, 50 ], false);
				}
				tagAsHtml.print(urlAfter);
				return tagAsHtml.close(true);
			} else if (uin) {
				return uinBefore + "<a href=\"uin:" + uin + "\" class=\"uinLink\">" + uin + "</a>" + uinAfter;
			} else if (srcLang && srcCode) {
				if (body.style#-syntax-highlight == "on")
					return "<div class=\"codeDiv\"><img src=\"source-code:selectall\" class=\"codeCopyAll\" /><source-code lang=\"" + srcLang + "\">" + srcCode + "</source-code></div>";
				else
					return match;
			} else if (bold) {
				return boldBefore + "<span class=\"bold\">" + bold + "</span>" + boldAfter;
			} else if (underlined) {
				return underlinedBefore + "<span class=\"underlined\">" + underlined + "</span>" + underlinedAfter;
			} else return match;
		});
		return msgOut;
	}

	function addEvents(events, prepend) {
//var start = System.ticks;
		isLoading = true;
		if (events && events.length > 0) {
			var data = Stream.openString();
			if (prepend && (eventCount + events.length) > eventLimit) {
				events = events.slice(events.length - (eventLimit - eventCount));
				showLimitWarning();
			}

			for (var event in events)
			addEvent(data, event);

			if (prepend)
				chat.prepend(data.close(true));
			else
				chat.append(data.close(true));
		}
//stdout.println("Add to DOM: " + (System.ticks - start));
//start = System.ticks;
		var hiddenMsgs = $$(.msgFull.hidden);
		for (var hiddenMsg in hiddenMsgs)
		hiddenMsg.attributes.removeClass("hidden");

		chat.attributes.removeClass("hidden");

		changeRanges();
		initTopTime();
		updateCurTime();
		updateMessages();
		updateSmiles();
		updateFontStyles();
		rescaleImages();

		isLoading = false;
//stdout.println("After DOM: " + (System.ticks - start));
	}

	function addEvent(msg, event) {
		var isMyEvent	= event[0],
			header		= event[1],
			message		= event[2],
			images		= event[3],
			links		= event[4],
			evTime		= event[5],
			evPic		= event[6],
			cryptPic	= event[7],
			statusPic	= event[8],
			statusPicEx = event[9],
			animate		= event[10];

		var msgCls = "msgFull";
		if (animate) msgCls += " hidden";
		if (isMyEvent) msgCls += " my";

		msg.print("<div class=\"" + msgCls + "\" time=\"" + evTime + "\">");

        msg.print("<div class=\"msgTitle\">");
		msg.print(makeImg("msgEventImg", evPic));
		if (cryptPic !== false)
		msg.print(makeImg("msgCryptImg", cryptPic));
		msg.print("<div class=\"msgWhat\">" + header[0] + "</div>" +
				  "<div class=\"msgStatusImages\">");

		if (statusPic !== false)
		msg.print(makeImg("msgStatusImg", statusPic));
		if (statusPicEx !== false)
		msg.print(makeImg("msgStatusExtImg", statusPicEx));

		msg.print("</div><div class=\"msgDate\">" + header[1] + "</div>");
		if (header[2] != "")
		msg.print("<div class=\"msgMulti\">" + header[2] + "</div>");
		msg.print("</div>");

		msg.print("<div class=\"msgBody\"><div class=\"msgInnerBody\">" + createBody(isMyEvent, message, links));

		if (images !== false) {
			msg.print("<div class=\"msgEmbeddedImages\">");
			for (var image in images)
			msg.print("<img class=\"embeddedImg\" data-action=\"download\" data-link=\"embedded:" + image + "\" alt=\"\" />");
			msg.print("</div>");
		}

        msg.print("</div></div></div>");
		eventCount++;
	}

	function clearEvents() {
		chat.clear();
		chat.attributes.addClass("hidden");
		updateMessages();
	}

	function updateMessages() {
		messages = $$(.msgFull);
	}

	function correctScrollPos(scrollPos) {
		var scrollHeight = chat.box(#height, #padding) + (history.attributes.hasClass("removed") ? 0 : history.box(#height, #padding));
		var chatHeight = view.box(#height);
		if (scrollPos > scrollHeight - chatHeight)
		scrollPos = scrollHeight - chatHeight;
		if (scrollPos < 0) scrollPos = 0;
		return scrollPos;
	}

	function scrollIntoView(el, smooth) {
		view.update();
		self.post(function() {
			var scrollPos = el.box(#top, #margin, #parent) + (history.attributes.hasClass("removed") ? 0 : history.box(#height, #padding));
			body.scrollTo(0, correctScrollPos(scrollPos), smooth);
		});
	}

	function scrollToTop() {
		if (chat.length > 0 && chat.first)
		scrollIntoView(chat.first, true);
	}

	function scrollToBottom(animate) {
		if (chat.length > 0 && chat.last)
		scrollIntoView(chat.last, animate);
	}

	function scrollToBottomIfLast(imgTag) {
		if (autoScroll && messages.length > 0 && imgTag.$p(.msgFull) == messages.last)
		scrollToBottom(false);
	}

	function setAutoscrollState(state) {
		autoScroll = state;
	}

	function rememberScrollPos() {
		scrollPos = body.scroll(#top);
	}

	function restoreScrollPos() {
		self.post(function() {
			body.scrollTo(0, scrollPos, false);
		});
	}

	function rememberTopEvent() {
		var topEvent = chat.first;
		if (topEvent) topEventTime = topEvent.attributes["time"];
	}

	function restoreTopEvent() {
		view.update();
	    var msg;
		if (topEventTime)
			msg = self.select(".msgFull[time=\"" + topEventTime + "\"]");
		else
			msg = chat.last;
		if (msg) scrollIntoView(msg, false);
	}

	function moveToTime(time, fast) {
		for (var msg in messages)
		if (msg.attributes["time"] == time) {
			scrollIntoView(msg, !fast);
			break;
		}
	}

	function scrollEvent(cnt) {
		for (var msg in messages)
		if (isInView(msg)) {
			if (cnt > 0) {
				for (var i = 1; i <= cnt; i++)
				if (msg.next) msg = msg.next;
			} else if (cnt < 0) {
				for (var i = cnt; i <= -1; i++)
				if (msg.prior) msg = msg.prior;
			}
			if (msg) scrollIntoView(msg, true);
			break;
		}
	}

	function scrollLine(cnt) {
		// 1 step = 10% of chat height
		self.post(function() {
			var scrollPos = correctScrollPos(body.scroll(#top) + cnt * view.box(#height) / 10);
			body.scrollTo(0, scrollPos, true);
		});
	}

	function scrollWheel(direction) {
		// 1 step = 10% of chat height
		self.post(function() {
			var scrollPos = correctScrollPos(body.scroll(#top) + direction * wheelVelocity * view.box(#height) / 10);
			body.scrollTo(0, scrollPos, true);
		});
	}

	function updateMsgStatus(evPic) {
		if (evPic[2] < 0) evPic[2]--;
		if (evPic[3] < 0) evPic[3]--;
		var oldImg = self.select(".msgFull[time=\"" + evPic[0] + "\"] .msgEventImg");
		var newImg = new Element("div");
		newImg.attributes["class"] = "msgEventImg";
		newImg.attributes["style"] = "background-image: url(themepic:" + evPic[1] + "); " +
		"background-position: " + evPic[2] + "px " + evPic[3] + "px; width: " + evPic[4] + "px; height: " + evPic[5] + "px;";
		if (oldImg) {
			oldImg.parent.insert(newImg, oldImg.nodeIndex);
			oldImg.remove();
		}
	}

	function getTextNodes(node) {
		var result = "";
		for (var child = node.firstNode; child != null; child = child.nextNode) {
			if (child.isText || child.length == 0) {
    			result += child.text;
			} else {
				if (child.tag == "text")
					result += getTextNodes(child) + "\r\n";
				else
					result += getTextNodes(child);
			}
		}
		return result;
	}

	function getSelectedTextInfo() {
		var str = "";
		var startHistNode = "0";
		var endHistNode = "0";
		var wholeEvents = false;
		if (selStart > 0) {
			wholeEvents = true;
			var nodes = $$(.msgFull.selected);
			if (nodes.length > 0) {
				startHistNode = nodes[0].attributes["time"];
				endHistNode = nodes.last.attributes["time"];
			}
			for (var node in nodes) {
				if (str.length > 0) str += "\r\n";
				var dateText = node.$(.msgDate).text;
				var whatText = node.$(.msgWhat).text;
				var multiText = "";
				var multi = node.$(.msgMulti);
				if (multi != null) {
					multiText = multi.text;
					if (multiText.length > 0) multiText = " (" + multiText + ")";
				}

				var bodyText = getTextNodes(node.$(.msgInnerBody));
				str += " " + dateText + ", " + whatText + multiText + "\r\n" + bodyText;
			}
		} else {
			var innerBodies = $$(.msgInnerBody);
			for (var innerBody in innerBodies) {
				if (innerBody.selection.text != null && innerBody.selection.text !== "") {
					if (str !== "") str += "\r\n";
					str += innerBody.selection.text;
				}
				var codeBlocks = innerBody.$$(source-code);
				for (var codeBlock in codeBlocks)
				if (codeBlock.selection.text != null && codeBlock.selection.text !== "") {
					if (str !== "") str += "\r\n";
					str += codeBlock.selection.text;
				}
			}
		}
		return [str.replace(/\r?\n/g, "\r\n"), startHistNode, endHistNode, wholeEvents];
	}

	function getQuote() {
		SendQuote(selInfo.text());
	}

	function saveSelection() {
		selInfo.value = getSelectedTextInfo();
		UpdateSelection(selInfo.text(), selInfo.start(), selInfo.end(), selInfo.isWholeEvents());
		if (autoCopy) copySelected();
	}

	function clearSelection(wholeOnly = false) {
		if (!wholeOnly) {
			var innerBodies = $$(.msgInnerBody);
			for (var innerBody in innerBodies)
			innerBody.selection.collapse(#toStart);

			var codeBlocks = $$(source-code);
			for (var codeBlock in codeBlocks)
			codeBlock.selection.collapse(#toStart);
		}

		selStart = 0;
		for (var el in messages)
		deselectEvent(el);

		view.update();
	}

	function setSelection(start, end) {
		clearSelection();

		for (var el in messages) {
			var msgTime = el.attributes["time"].toFloat(0);
			if (msgTime >= start.toFloat(0) && msgTime <= end.toFloat(0))
				selectEvent(el);
			else
				deselectEvent(el);
		}
		selStart = start.toFloat(0);

		saveSelection();
	}

	function selectAll() {
		if (eventCount > 0)
		setSelection(chat.first.attributes["time"], chat.last.attributes["time"]);
	}

	function copySelected() {
		var str = selInfo.text();
		if (str !== "") view.clipboard(#put, str);
	}

	function isEventSelected(el) {
		return el.attributes.hasClass("selected");
	}

	function selectEvent(el) {
		if (!el.attributes.hasClass("selected"))
		el.attributes.addClass("selected");
	}

	function deselectEvent(el) {
		if (el.attributes.hasClass("selected"))
		el.attributes.removeClass("selected");
	}

	function showImage(imgTag, link) {
		if (link.indexOf("embedded:") == 0) {
			imgTag.attributes["src"] = link;
			finishImage(imgTag);
		} else {
			var cached = self.bindImage("download:" + link) !== null;
			imgTag.attributes["src"] = "download:" + link;
			if (cached) finishImage(imgTag);
		}
	}

	function finishImage(imgTag) {
		imgTag.style#width = "auto";
		imgTag.style#height = "auto";
		imgTag.style#opacity = 0;
		imgTag.attributes.addClass("loaded");
		scrollToBottomIfLast(imgTag);
	}

	function imgCheck(data, status) {
		var responseStr = data.toString("UTF-8");
		if (responseStr == "") {
	        if (this.parent) this.parent.remove();
			return;
		}

		var response = parseData(responseStr);
		if (response.isImg === 1) { // Image link confirmed, show preloader and start download
			if (this.parent) this.parent.attributes.removeClass("hidden");
			this.post(function(){
				showImage(this, response.link);
			});
		} else { // Not an image link, remove loader
			if (this.parent) this.parent.remove();
		}
	}

	function getImg(imgTag) {
		var action = imgTag.attributes["data-action"];
		var link = imgTag.attributes["data-link"];
		imgTag.attributes.remove("data-action");
		imgTag.attributes.remove("data-link");
		if (action == "check") // not in cache, check first
			imgTag.request(imgCheck, #get, "check:" + link);
		else // image was already cached or embedded
			showImage(imgTag, link);
	}

    function isInView(el) {
		var (elLeft, elTop, elRight, elBottom) = el.box(#rect, #inner, #view);
		return !(elBottom < 0 || elTop > view.box(#height));
	}

    var winx = 0,
		winy = 0,
		winstep = 40;

	function viewInWindow(title, body, images, formicon) {
		var (dw, dh) = view.screenBox(view.screen, #frame, #dimension);
		var (px, py) = view.screenBox(view.screen, #frame, #position);
		if (winx == 0 || winy == 0) {
			winx = dw/5;
			winy = dh/5;
		}
		View.window({
			type: View.FRAME_WINDOW,
			url: self.url("window.htm"),
			width: dw/2.5,
			height: dh/2.5,
			x: px + winx,
			y: py + winy,
			state: View.WINDOW_SHOWN,
			alignment: 5,
			caption: title,
			parameters: {
            	body: body,
                images: images,
				formicon: formicon;
			}
		});
		winx += winstep;
		winy += winstep;
		if (winx > dw/3 || winy > dh/3) {
			winx = winstep;
			winy = winstep;
		}
	}

	self.timer(250, function() {
		if (isLoading) return true;
		var imgs = $$(img[data-action]);
		for (var img in imgs)
		if (isInView(img)) getImg(img);
		return true;
	}, true);

	function deleteEvents(start, end) {
		var startTime = start.toFloat(0);
		var endTime = end.toFloat(0);
		for (var msg in messages) {
			var when = msg.attributes["time"].toFloat(0);
			if (when >= startTime && when <= endTime) msg.remove();
		}
		updateMessages();
	}

	function initSettings(settings) {
		autoCopy = settings[0];
		showSmiles = settings[1];
		wheelVelocity = settings[2];

		imgLinksIn = settings[7];
		imgLinksOut = settings[8];
		cachePath = settings[12];
		videoLinks = settings[13];
		preferredRes = settings[14];

		switch(settings[3]) {
			case 0:
				body.style#image-rendering = "optimize-quality";
				break;
			case 1:
				body.style#image-rendering = "optimize-speed";
				break;
			case 2:
				body.style#image-rendering = "crisp-edges";
				break;
		}

		if (settings[4])
			body.style#font-rendering-mode = "sub-pixel";
		else
			body.style#font-rendering-mode = "snap-pixel";

		maxImgWidth = settings[5];
		maxImgHeight = settings[6];

		fontCodes = settings[9];
		updateFontStyles();

		var tiledBgPic = settings[10];
		if (tiledBgPic.length > 0) {
			self.style#background-image="url(" + tiledBgPic + ")";
			self.style#background-repeat = "repeat";
			self.style#background-position = "center center";
		} else {
			self.style#background-image="none";
			self.style#background-repeat = "no-repeat";
		}

        var positionedBgPic = settings[11];
		if (positionedBgPic.length > 0) {
			body.style#background-image="url(" + positionedBgPic + ")";
			switch(positionedBgPic.charAt(positionedBgPic.length - 1)) {
				case "1":
					body.style#background-position = "left top";
					break;
				case "2":
					body.style#background-position = "right top";
					break;
				case "3":
					body.style#background-position = "left bottom";
					break;
				case "4":
					body.style#background-position = "right bottom";
					break;
			}
		} else body.style#background-image="none";

		rescaleImages();
	}

	function initSettingsOnce(ShowHistRanges) {
		if (ShowHistRanges) {
			toggle.attributes.removeClass("inactive");
			history.attributes.removeClass("hidden");
		}
		history.attributes.addClass("animate");

		var lastitems = $$(#lastcnt > div);
		for (var lastitem in lastitems) {
	       	lastitem.text += " " + GetTranslation("messages");
			lastitem.on("mousedown", function (e) {
				loadHistory(-this.attributes["data-count"].toInteger(10));
			});
		}

		$(#h_last).text = GetTranslation($(#h_last).text);
		$(#h_today).text = GetTranslation($(#h_today).text);
		$(#h_yesterday).text = GetTranslation($(#h_yesterday).text);
		$(#h_oneday).text = GetTranslation($(#h_oneday).text);
		$(#h_twodays).text = GetTranslation($(#h_twodays).text);
		$(#h_threedays).text = GetTranslation($(#h_threedays).text);
		$(#h_lastweek).text = GetTranslation($(#h_lastweek).text);
		$(#h_lastmonth).text = GetTranslation($(#h_lastmonth).text);
		$(#h_lastyear).text = GetTranslation($(#h_lastyear).text);
		$(#h_all).text = GetTranslation($(#h_all).text);

		vc.initTitles();
	}

	function initSettingsMsgPreview(searchText) {
		body.attributes.addClass("msgPreview");
		history.attributes.addClass("removed");
		toggle.attributes.addClass("removed");
		chat.append("<div class=\"searchHere\">" + searchText + "</div>")
		chat.attributes.removeClass("hidden");
	}

	function initSmiles(smiles) {
		emo.init("smile:", true, parseData(smiles));
	}

	function rescaleImages() {
		function cssStyle(rule) {
			return {
				max-width: (maxImgWidth > 0 ? maxImgWidth + "px" : "calc(100vw - 41px)");
				max-height: (maxImgHeight > 0 ? maxImgHeight + "px" : "none");
			}
		}

		self.style.documentRules({
			selector: ".msgBody .msgInnerBody .linkedImg",
			properties: cssStyle
		});

		self.style.documentRules({
			selector: ".msgBody .msgInnerBody .embeddedImg",
			properties: cssStyle
		});
	}

	function num2weekday(num) {
		var month = ["Понедельник","Вторник","Среда","Четверг","Пятница","Суббота","Воскресенье"];
		return month[num];
	}

	function num2month(num) {
		var month = ["Января","Февраля","Марта","Апреля","Мая","Июня","Июля","Августа","Сентября","Октября","Ноября","Декабря"];
		return month[num - 1];
	}

	function delphi2unix(time) {
		return (time - 25569.0) * 86400000.0;
	}

	function unix2delphi(time) {
		return time / 86400000.0 + 25569.0;
	}

	function showLimitWarning() {
		$(#ranges).html = GetTranslation("Message count limit reached, full history is available in") + " <a href=\"open:search\">" + GetTranslation("search window") + "</a>";
		$(#ranges).style#border-spacing = 0;
	}

	function initTopTime() {
		if (topTime == 0 && chat.first)
		topTime = chat.first.attributes["time"].toFloat(0);
		if (topTime == 0){
			var now = new Date();
			topTime = unix2delphi(now.valueOf() + now.timeZoneOffset());
		}
	}

	function updateCurTime() {
		var date = new Date(delphi2unix(topTime));
		curtime.html = num2weekday(date.UTCdayOfWeek) + ", " + date.UTCday + " " + num2month(date.UTCmonth) + " " + date.UTCyear/* + ", " + date.UTChour + ":" + date.UTCminute*/;
		curtime.style#display = "block";
	}

	function changeRanges() {
		if ($(#h_last)) $(#h_last).style#display = "none";
		if ($(#h_today)) $(#h_today).style#display = "none";
		if ($(#h_yesterday)) $(#h_yesterday).style#display = "none";
		if ($(#h_oneday)) $(#h_oneday).style#display = "inline";
		if ($(#h_twodays)) $(#h_twodays).style#display = "inline";
	}

	function showHistoryLoading() {
		loading.attributes.addClass("visible");
		curtime.html = GetTranslation("Loading history...");
		curtime.style#display = "block";
	}

	function hideHistoryLoading() {
		loading.attributes.removeClass("visible");
	}

	function hideHistory() {
    	if (eventCount >= eventLimit) {
			showLimitWarning();
		} else {
			history.attributes.addClass("removed");
			toggle.attributes.addClass("removed");
		}
	}

	function loadHistory(numOfDays) {
		showHistoryLoading();
		changeRanges();
		self.timer(400, function() {
			if (numOfDays >= 0) {
				initTopTime();
				LoadHistory(numOfDays, topTime);
				topTime = Math.floor(topTime - numOfDays);
				updateCurTime();
			} else {
				LoadHistory(numOfDays, topTime);
			}
		});
	}

	$(#h_last).on("click", function (e) {
		lastcnt.style.set({
			left: this.box(#left, #inner, #root) + "px",
			top: this.box(#top, #inner, #root) + this.box(#height, #margin) + 5 + "px",
			display: "block",
			opacity: 1
		});
	});

	$(#h_today).on("click", function (e) {
		loadHistory(0);
	});
	$(#h_yesterday).on("click", function (e) {
		loadHistory(1);
	});
	$(#h_oneday).on("click", function (e) {
		loadHistory(1);
	});
	$(#h_twodays).on("click", function (e) {
		loadHistory(2);
	});
	$(#h_threedays).on("click", function (e) {
		loadHistory(3);
	});
	$(#h_lastweek).on("click", function (e) {
		loadHistory(7);
	});
	$(#h_lastmonth).on("click", function (e) {
		loadHistory(30);
	});
	$(#h_lastyear).on("click", function (e) {
		loadHistory(365);
	});
	$(#h_all).on("click", function (e) {
		loadAll()
	});

	function loadAll() {
		if (!history.attributes.hasClass("removed"))
		loadHistory(-1);
	}

	toggle.on("click", function (e) {
		if (history.box(#width) < history.intrinsicWidthMax() + 50) {
			view.msgbox(#information, GetTranslation("Not enough space to display"), GetTranslation("Information"), #ok);
			return;
		}
		if (history.attributes.hasClass("hidden")) {
			history.attributes.removeClass("hidden");
			toggle.attributes.removeClass("inactive");
		} else {
			history.attributes.addClass("hidden");
			toggle.attributes.addClass("inactive");
		}
	});

	self.on("mousedown", function(e) {
		if (e.mainButton) {
			clearSelection();
			saveSelection();
			if (lastcnt.style#display !== "none") {
				lastcnt.style#opacity = 0;
                self.timer(300, function() {
					lastcnt.style#display = "none";
				});
			}
		}
	});

	body.subscribe(function(e) {
		if (e.altKey) {
			if (e.wheelDelta > 0)
				scrollEvent(-1);
			else
				scrollEvent(+1);
		} else if (e.wheelDelta)
			scrollWheel(-e.wheelDelta);
		e.preventDefault();
		return true;
	}, Event.MOUSE, Event.MOUSE_WHEEL);

	body.subscribe(function(e) {
		if (e.altKey && e.keyCode in [Event.VK_UP, Event.VK_DOWN, Event.VK_PRIOR, Event.VK_NEXT])
		switch(e.keyCode) {
			case Event.VK_UP:
				scrollEvent(-1);
				e.preventDefault();
				return true;
			case Event.VK_DOWN:
				scrollEvent(+1);
				e.preventDefault();
				return true;
			case Event.VK_PRIOR:
				scrollEvent(-5);
				e.preventDefault();
				return true;
			case Event.VK_NEXT:
				scrollEvent(+5);
				e.preventDefault();
				return true;
		}
	}, Event.KEY, Event.KEY_DOWN);

	body.subscribe(function(e) {
		if (!e.propButton || vc.isVisible()) return;
		var isLink = false;
		var isImage = false;
		var data = "";
		if (e.target.tag == "a") {
			isLink = true;
			data = e.target.attributes["href"];
		} else if (e.target.tag == "img") {
			isImage = true;
			data = e.target.attributes["src"];
		}
		var isMsgPreview = body.attributes.hasClass("msgPreview");
		OpenChatMenu(data, rightClickedTime, isMsgPreview, isLink, isImage);
	}, Event.MOUSE, Event.MOUSE_DOWN);

	body.on("mousedown", ".msgFull", function (e) {
		if (e.propButton)
		rightClickedTime = this.attributes["time"];
	});

	body.on("mousedown", ".msgTitle", function (e) {
		if (!e.mainButton) return false;
		if ((!e.shiftKey && !e.ctrlKey) || selStart == 0) {
			clearSelection();
			selStart = this.parent.attributes["time"].toFloat(0);
			selectEvent(this.parent);
		} else {
			var selEnd = this.parent.attributes["time"].toFloat(0);
			if (e.ctrlKey) {
				if (isEventSelected(this.parent))
					deselectEvent(this.parent);
				else
					selectEvent(this.parent);
			} else if (e.shiftKey)
			for (var msg in messages) {
				var msgTime = msg.attributes["time"].toFloat(0);
				if ((selStart <= selEnd && msgTime >= selStart && msgTime <= selEnd) ||
					(selStart > selEnd && msgTime <= selStart && msgTime >= selEnd))
					selectEvent(msg);
				else
					deselectEvent(msg);
			}
		}
		saveSelection();
		e.stopPropagation();
		return true;
	});

	body.on("~mousedown", ".msgInnerBody", function(e) {
		if (e.mainButton) clearSelection(e.ctrlKey || e.shiftKey);
	});

	body.on("~mouseup", ".msgInnerBody", function(e) {
		if (e.mainButton) {
			saveSelection();
			if (this.selection.text == "") body.state.focus = true;
		}
	});

	body.on("~mousedown", "img.codeCopyAll", function(e) {
		if (e.mainButton) {
			clearSelection(e.ctrlKey || e.shiftKey);
			var code = this.parent.$(source-code);
			code.selection.select(
				[bookmark: code.first, 0, false],
				[bookmark: code.last, 0, false]
			);
			e.preventDefault();
		}
	});

	body.on("~dblclick", "img.codeCopyAll", function(e) {
		e.preventDefault();
		return true;
	});

	body.on("~mousedown", "img.loaded", function(e) {
		if (!e.mainButton) return;

		var msg = this.$p(.msgFull);
		//var time = msg.attributes["time"].toFloat(0);
		var cnt = 0, selImg = 0;
		var imgLinks = new Array();

		var linkedImgs = msg.$$(img[src^="download:"]);
		for (var linkedImg in linkedImgs) {
			var src = linkedImg.attributes["src"];
			imgLinks.push(src.substr(9));
			if (linkedImg === this) selImg = cnt;
			cnt++;
		}

		var embeddedImgs = msg.$$(img[src^="embedded:"]);
		for (var embeddedImg in embeddedImgs) {
			imgLinks.push(embeddedImg.attributes["src"]);
			if (embeddedImg === this) selImg = cnt;
			cnt++;
		}
		ShowPreview(imgLinks, selImg);
	});

	body.on("click", "a[kind]", function(e) {
		vc.setLoadingText(GetTranslation("Retrieving list of available video formats..."));
		vc.show();
		vc.src = this.attributes["src"];
		vc.kind = this.attributes["kind"];
		vc.init = false;
		self.timer(500, function() {
			var links;
			if (vc.kind == "youtube")
				links = GetYoutubeLinks(vc.src);
			else if (vc.kind == "vimeo")
				links = GetVimeoLinks(vc.src);

			if (!links || links.length == 0) {
				vc.error();
				return;
			}

			if (links.length == 1) {
				var linkdata = parseData(links[0]);
				vc.title = linkdata.title;
               	vc.startVideo(linkdata.url, linkdata.format, linkdata.codecs);
				return;
			}

			var htmldata = "";
			for (var link in links) {
				var linkdata = parseData(link);
				vc.title = linkdata.title;
				htmldata += "<div format=\"" + linkdata.format + "\" codecs=\"" + linkdata.codecs + "\" url=\"" + linkdata.url + "\">" + linkdata.format + "</div>";
			}
			vc.setLoadingText(GetTranslation("Choose video format") +
							  "<div id=\"videoformats\">" + htmldata + "</div>" +
							  "<a href=\"#\" close>" + GetTranslation("Close") + "</a>", true);
		});
	});

	view.on("size", function() {
		var w = history.box(#width);
		if (w > 0 && w < history.intrinsicWidthMax() + 50 &&
			!toggle.attributes.hasClass("inactive")) {
			toggle.attributes.addClass("inactive");
			history.attributes.addClass("hidden");
		}
		if (vc.init) vc.alignPlayerControls();
    });
</script>
<popup id="videoinfo"></popup>
</head>
<body>
	<div id="history" class="hidden">
		<div id="ranges">
			<a href="" id="h_last">Last</a>
			<a href="" id="h_today">Today</a>
			<a href="" id="h_yesterday">Yesterday</a>
			<a href="" id="h_oneday" style="display: none">1 day</a>
			<a href="" id="h_twodays" style="display: none">2 days</a>
			<a href="" id="h_threedays">3 days</a>
			<a href="" id="h_lastweek">Week</a>
			<a href="" id="h_lastmonth">Month</a>
			<a href="" id="h_lastyear">Year</a>
			<a href="" id="h_all">All</a>
		</div>
		<div id="curtime"></div>
		<div class="hr"></div>
	</div>
	<div id="toggle" class="inactive"></div>
	<div id="chat" class="hidden"></div>
	<div id="loading"></div>
    <div id="videoview">
		<div id="videoplayer">
			<div id="playerdisplay">
				<video id="video" />
				<div id="videoload"></div>
				<svg id="play" viewbox="1 1 28 28">
					<path d="M 11,8 21,15 11,22 z"/>
				</svg>
				<svg id="pause" viewbox="1 1 28 28">
					<path d="M 8,8 13,8 13,22 8,22 z M 17,8 22,8 22,22 17,22 z"/>
				</svg>
			</div>
			<div id="playercontrols">
				<div id="controls">
					<input type="hslider" id="videopos" />
					<output value="00:00 / 00:00" id="videotime" />
					<input type="hslider" id="videovol" value="50" min="1" max="100" />
					<div id="info" titleid="videoinfo">
						<svg viewBox="0 0 12.581 25.837">
							<path d="M5.109,25.456c-3.041,1.068-5.547-0.157-5.044-3.077c0.503-2.92,3.388-9.172,3.799-10.354  c0.412-1.183-0.377-1.506-1.223-1.025c-0.487,0.281-1.212,0.845-1.834,1.393c-0.172-0.348-0.415-0.744-0.598-1.125  c1.015-1.017,2.712-2.381,4.721-2.875c2.4-0.592,6.411,0.354,4.688,4.942c-1.232,3.269-2.103,5.526-2.65,7.206  C6.419,22.222,7.07,22.574,8.03,21.92c0.75-0.512,1.549-1.208,2.135-1.749c0.271,0.441,0.358,0.581,0.626,1.087  C9.774,22.299,7.115,24.738,5.109,25.456z M11.408,5.229c-1.38,1.174-3.424,1.148-4.566-0.057C5.698,3.966,5.889,2.038,7.267,0.864  c1.379-1.174,3.423-1.148,4.566,0.057C12.977,2.126,12.787,4.054,11.408,5.229z"/>
						</svg>
					</div>
					<div id="upload">
						<svg height="1000" width="928.571" xmlns="http://www.w3.org/2000/svg">
							<path d="M714.24 821.44q0 -14.508 -10.602 -25.11t-25.11 -10.602 -25.11 10.602 -10.602 25.11 10.602 25.11 25.11 10.602 25.11 -10.602 10.602 -25.11zm142.848 0q0 -14.508 -10.602 -25.11t-25.11 -10.602 -25.11 10.602 -10.602 25.11 10.602 25.11 25.11 10.602 25.11 -10.602 10.602 -25.11zm71.424 -124.992v178.56q0 22.32 -15.624 37.944t-37.944 15.624h-821.376q-22.32 0 -37.944 -15.624t-15.624 -37.944v-178.56q0 -22.32 15.624 -37.944t37.944 -15.624h238.266q11.718 31.248 39.339 51.336t61.659 20.088h142.848q34.038 0 61.659 -20.088t39.339 -51.336h238.266q22.32 0 37.944 15.624t15.624 37.944zm-181.35 -361.584q-9.486 22.32 -32.922 22.32h-142.848v249.984q0 14.508 -10.602 25.11t-25.11 10.602h-142.848q-14.508 0 -25.11 -10.602t-10.602 -25.11v-249.984h-142.848q-23.436 0 -32.922 -22.32 -9.486 -21.762 7.812 -38.502l249.984 -249.984q10.044 -10.602 25.11 -10.602t25.11 10.602l249.984 249.984q17.298 16.74 7.812 38.502z"/>
						</svg>
					</div>
					<div id="close">
						<svg viewBox="0 0 480 480">
							<path d="M310.182,235.995l103.285-103.259c5.006-5.018,5.006-13.237,0-18.251l-54.721-54.733c-5.014-5-13.229-5-18.24,0   l-103.281,103.28L133.944,59.752c-5.018-5-13.229-5-18.246,0l-54.717,54.733c-5.008,5.014-5.008,13.233,0,18.251l103.281,103.259   L60.999,339.263c-5.018,5.014-5.018,13.232,0,18.25l54.717,54.738c5.018,5.001,13.229,5.001,18.242,0l103.268-103.285   l103.264,103.285c5.018,5.001,13.229,5.001,18.24,0l54.721-54.738c5.014-5.018,5.014-13.236,0-18.25L310.182,235.995z"/>
		  				</svg>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div id="lastcnt" class="popupmenu">
    	<div data-count="5">5</div>
		<div data-count="15">15</div>
		<div data-count="30">30</div>
	</div>
</body>
</html>